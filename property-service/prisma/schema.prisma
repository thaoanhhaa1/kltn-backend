// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int  @id @map("_id")
  name        String
  email       String  @unique
  avatar      String?
  phone_number String?
  user_types   String[]
  Properties  Property[]
  UserProductInteractions UserPropertyInteractions[]
}

model Address {
  address_id String @id @default(auto()) @map("_id") @db.ObjectId
  street String
  ward String
  district String
  city String
  Properties Property[]
}

model Property {
  property_id     String            @id @map("_id")
  owner_id        Int
  title           String
  description     String
  address_id      String            @db.ObjectId
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Address         Address           @relation(fields: [address_id], references: [address_id])
  deleted         Boolean           @default(false)
  slug            String            @unique
  latitude        Float?
  longitude       Float?
  RentalConditions RentalCondition[]
  RentalPrices    RentalPrice[]
  PropertyImages  PropertyImage[]
  PropertyAttributes PropertyAttribute[]
  Owner           User              @relation(fields: [owner_id], references: [user_id])
}

model RentalCondition {
  condition_id String @id @default(auto()) @map("_id") @db.ObjectId
  property_id String
  condition_type String
  condition_value String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Property Property @relation(fields: [property_id], references: [property_id])
}

model RentalPrice {
  price_id String @id @default(auto()) @map("_id") @db.ObjectId
  property_id String
  rental_price Float
  start_date DateTime @default(now())
  end_date DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Property Property @relation(fields: [property_id], references: [property_id])
}

model PropertyImage {
  image_id String @id @default(auto()) @map("_id") @db.ObjectId
  property_id String
  image_url String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Property Property @relation(fields: [property_id], references: [property_id])
}

model Attribute {
  attribute_id String @id @default(auto()) @map("_id") @db.ObjectId
  attribute_type String
  attribute_name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted Boolean @default(false)
  PropertyAttributes PropertyAttribute[]
}

model PropertyAttribute {
  property_attribute_id String @id @default(auto()) @map("_id") @db.ObjectId
  property_id String
  attribute_id String @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Property Property @relation(fields: [property_id], references: [property_id])
  Attribute Attribute @relation(fields: [attribute_id], references: [attribute_id])
}

enum UserInteractionType {
  VIEWED
  FAVORITED
}

model UserPropertyInteractions {
  interaction_id    String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id           Int
  property_id       String      @unique
  interaction_type  UserInteractionType
  deleted           Boolean     @default(false)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  User User @relation(fields: [user_id], references: [user_id])
}