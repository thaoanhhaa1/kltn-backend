// Đây là file schema Prisma của bạn,
// tìm hiểu thêm về nó trong tài liệu: https://pris.ly/d/prisma-schema

// Tìm cách để tăng tốc truy vấn của bạn, hoặc mở rộng dễ dàng với các chức năng serverless hoặc edge của bạn?
// Thử Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE // User has verified their email
  INACTIVE // User has not verified their email
  BLOCKED // User has been blocked by an admin
  DELETED // User has been deleted
}

model User {
  user_id         String     @id
  wallet_address  String?    @unique
  status          UserStatus @default(ACTIVE)
  ownedContracts  Contract[] @relation("OwnerContracts")
  rentedContracts Contract[] @relation("RenterContracts")

  @@map("`user`")
}

model Address {
  address_id String     @id @default(uuid())
  street     String
  ward       String
  district   String
  city       String
  properties Property[]

  @@map("`address`")
}

enum PropertyStatus {
  PENDING // waiting for approval
  ACTIVE // approved and available for rent
  INACTIVE // not approved
  REJECTED // rejected by admin
  UNAVAILABLE // rented out
}

model Property {
  property_id String         @id
  status      PropertyStatus @default(PENDING)
  deleted     Boolean?       @default(false)
  address_id  String
  address     Address        @relation(fields: [address_id], references: [address_id])
  contracts   Contract[]     @relation("PropertyContracts")

  @@map("`property`")
}

enum Status {
  WAITING
  DEPOSITED
  ONGOING
  ENDED
  OVERDUE
}

model Contract {
  contract_id               String        @id @default(uuid())
  owner_user_id             String
  renter_user_id            String
  property_id               String
  start_date                DateTime
  end_date                  DateTime
  deleted                   Boolean       @default(false)
  status                    Status        @default(WAITING)
  created_at                DateTime      @default(now())
  updated_at                DateTime      @updatedAt
  monthly_rent              Float
  deposit_amount            Float
  contract_terms            String
  transaction_hash_contract String?
  transactions              Transaction[] @relation("ContractTransactions")
  owner                     User          @relation("OwnerContracts", fields: [owner_user_id], references: [user_id])
  renter                    User          @relation("RenterContracts", fields: [renter_user_id], references: [user_id])
  property                  Property      @relation("PropertyContracts", fields: [property_id], references: [property_id])

  @@map("`contract`")
}

model Transaction {
  id               Int      @id @default(autoincrement())
  contract_id      String
  amount           Float
  transaction_hash String
  status           String
  description      String? // Trường mô tả nội dung giao dịch
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  contract         Contract @relation("ContractTransactions", fields: [contract_id], references: [contract_id])

  @@map("`transaction`")
}
